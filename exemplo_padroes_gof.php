<?php

/**
 * Exemplo de Uso dos Padr√µes GOF
 *
 * Este arquivo demonstra como os tr√™s padr√µes GOF implementados
 * funcionam em conjunto no sistema.
 *
 * ATEN√á√ÉO: Este √© um arquivo de exemplo/demonstra√ß√£o.
 * N√£o deve ser executado em produ√ß√£o.
 */

require_once __DIR__ . '/config/config.php';
require_once __DIR__ . '/config/autoloader.php';

use App\Models\Database;
use App\Models\ConteudoEstudo;
use App\Models\Meta;
use App\Controllers\UsuarioController;

echo "==============================================\n";
echo "   DEMONSTRA√á√ÉO DOS PADR√ïES GOF\n";
echo "==============================================\n\n";

// ============================================================================
// 1. PADR√ÉO SINGLETON - Database
// ============================================================================
echo "1. PADR√ÉO SINGLETON (Database)\n";
echo "----------------------------------------------\n";

// Obt√©m a primeira inst√¢ncia
$db1 = Database::getInstance();
echo "‚úì Primeira inst√¢ncia criada\n";

// Obt√©m a "segunda" inst√¢ncia (na verdade, a mesma)
$db2 = Database::getInstance();
echo "‚úì Segunda inst√¢ncia 'criada'\n";

// Verifica se s√£o a mesma inst√¢ncia
if ($db1 === $db2) {
  echo "‚úì SUCESSO: Ambas s√£o a MESMA inst√¢ncia! (Singleton funcionando)\n";
} else {
  echo "‚úó ERRO: Inst√¢ncias diferentes (Singleton n√£o funcionou)\n";
}

// Tenta criar inst√¢ncia diretamente (vai falhar)
echo "\nTentando criar inst√¢ncia com 'new Database()'...\n";
try {
  // $db3 = new Database(); // Descomente para ver o erro
  echo "‚úó Isso n√£o deveria funcionar (construtor √© privado)\n";
} catch (Error $e) {
  echo "‚úì SUCESSO: Erro capturado - Construtor privado impede instancia√ß√£o direta\n";
}

echo "\n";

// ============================================================================
// 2. PADR√ÉO FACADE - UsuarioController
// ============================================================================
echo "2. PADR√ÉO FACADE (UsuarioController)\n";
echo "----------------------------------------------\n";

echo "O UsuarioController esconde a complexidade da autentica√ß√£o:\n";
echo "  ‚Ä¢ Valida√ß√£o de dados\n";
echo "  ‚Ä¢ Token CSRF\n";
echo "  ‚Ä¢ Consulta ao banco\n";
echo "  ‚Ä¢ Hash de senha\n";
echo "  ‚Ä¢ Gerenciamento de sess√£o\n";
echo "  ‚Ä¢ Mensagens flash\n";
echo "  ‚Ä¢ Redirecionamentos\n\n";

echo "Interface SIMPLES para o roteador:\n";
echo "  \$controller = new UsuarioController();\n";
echo "  \$controller->login(); // Toda complexidade escondida!\n\n";

echo "‚úì Facade fornece interface simplificada para subsistema complexo\n";
echo "\n";

// ============================================================================
// 3. PADR√ÉO OBSERVER - ConteudoEstudo e Meta
// ============================================================================
echo "3. PADR√ÉO OBSERVER (ConteudoEstudo ‚Üí Meta)\n";
echo "----------------------------------------------\n";

// Simula√ß√£o do fluxo (comentado para n√£o executar no banco real)
echo "FLUXO DE EXECU√á√ÉO:\n\n";

echo "1Ô∏è‚É£  Usu√°rio marca um ConteudoEstudo como 'CONCLU√çDO'\n";
echo "    \$conteudo->alterarStatus(5, 'concluido');\n\n";

echo "2Ô∏è‚É£  ConteudoEstudo atualiza status no banco de dados\n\n";

echo "3Ô∏è‚É£  ConteudoEstudo carrega observadores (Metas relacionadas)\n";
echo "    \$this->carregarObservadores(\$conteudoId);\n\n";

echo "4Ô∏è‚É£  ConteudoEstudo NOTIFICA todos os observadores\n";
echo "    \$this->notify(['evento' => 'conteudo_concluido', ...]);\n\n";

echo "5Ô∏è‚É£  Cada MetaObserver recebe a notifica√ß√£o\n";
echo "    MetaObserver::update(\$subject, \$data);\n\n";

echo "6Ô∏è‚É£  MetaObserver verifica se conte√∫do pertence √† sua Meta\n\n";

echo "7Ô∏è‚É£  Meta marca conte√∫do como conclu√≠do\n";
echo "    \$meta->marcarConteudoConcluido(\$metaId, \$conteudoId);\n\n";

echo "8Ô∏è‚É£  Meta RECALCULA automaticamente seu progresso\n";
echo "    \$meta->calcularProgresso(\$metaId);\n\n";

echo "9Ô∏è‚É£  Se Meta atingiu 100%, √© marcada como conclu√≠da!\n\n";

echo "‚úì Observer permite notifica√ß√£o autom√°tica sem acoplamento direto\n";

echo "\n";

// ============================================================================
// EXEMPLO PR√ÅTICO COMENTADO
// ============================================================================
echo "==============================================\n";
echo "   EXEMPLO PR√ÅTICO (C√≥digo Comentado)\n";
echo "==============================================\n\n";

echo "// Para testar na pr√°tica, descomente o c√≥digo abaixo:\n\n";

echo "/*\n";
echo "// Conecta ao banco usando Singleton\n";
echo "\$db = Database::getInstance()->getConnection();\n\n";

echo "// Cria um conte√∫do de estudo\n";
echo "\$conteudo = new ConteudoEstudo();\n";
echo "\$conteudoId = \$conteudo->criar([\n";
echo "    'titulo' => 'Estudar Padr√µes GOF',\n";
echo "    'usuario_id' => 1,\n";
echo "    'status' => 'em_andamento'\n";
echo "]);\n\n";

echo "// Cria uma meta\n";
echo "\$meta = new Meta();\n";
echo "\$metaId = \$meta->criar([\n";
echo "    'titulo' => 'Concluir curso de Design Patterns',\n";
echo "    'usuario_id' => 1,\n";
echo "    'data_alvo' => '2025-12-31'\n";
echo "]);\n\n";

echo "// Vincula conte√∫do √† meta\n";
echo "\$meta->adicionarConteudo(\$metaId, \$conteudoId);\n\n";

echo "// Marca conte√∫do como conclu√≠do\n";
echo "// O padr√£o OBSERVER entra em a√ß√£o automaticamente!\n";
echo "\$conteudo->alterarStatus(\$conteudoId, ConteudoEstudo::STATUS_CONCLUIDO);\n\n";

echo "// Resultado: Meta atualiza seu progresso AUTOMATICAMENTE! üéâ\n";
echo "echo 'Progresso da meta: ' . \$meta->findById(\$metaId)['percentual_progresso'] . '%';\n";
echo "*/\n\n";

// ============================================================================
// BENEF√çCIOS DOS PADR√ïES
// ============================================================================
echo "==============================================\n";
echo "   BENEF√çCIOS DOS PADR√ïES IMPLEMENTADOS\n";
echo "==============================================\n\n";

echo "üìå SINGLETON (Database)\n";
echo "  ‚úÖ Uma √∫nica conex√£o com o banco\n";
echo "  ‚úÖ Economia de recursos\n";
echo "  ‚úÖ Controle centralizado\n";
echo "  ‚úÖ Lazy Loading\n\n";

echo "üìå FACADE (UsuarioController)\n";
echo "  ‚úÖ Interface simples para autentica√ß√£o\n";
echo "  ‚úÖ Complexidade escondida\n";
echo "  ‚úÖ F√°cil manuten√ß√£o\n";
echo "  ‚úÖ C√≥digo organizado\n\n";

echo "üìå OBSERVER (ConteudoEstudo/Meta)\n";
echo "  ‚úÖ Notifica√ß√£o autom√°tica\n";
echo "  ‚úÖ Desacoplamento total\n";
echo "  ‚úÖ Atualiza√ß√£o reativa\n";
echo "  ‚úÖ Escal√°vel para m√∫ltiplos observadores\n\n";

echo "==============================================\n";
echo "Consulte README_GOF.md para documenta√ß√£o completa\n";
echo "==============================================\n";
